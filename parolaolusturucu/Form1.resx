<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABMLAAATCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEnDiwBHwowJScKLPkrDi1hKw4tZSsOLWUrD
        i1lKw4tZSsOLWUrDi1lKw4tZSsOLWUrDi1lKw4tZSsOLWUrDi1lKw4tZSsOLWUrDi1lKw4tZSsOLWEnC
        ij5IwIkJScKKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABIxIkASMSJC0nDi39Kw4vpSsOL/krD
        i/9Kw4v/SsOL/0rDi/9Kw4v/SsOL/0rDi/9Kw4v/SsOL/0rDi/9Kw4v/SsOL/0rDi/9Kw4v/SsOL/0rD
        i/9Kw4v+SsOL6UnCi3xIv4kJSMCJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEnDigBJw4pASsOL6UrD
        i/9Kw4v/SsOL/0rDi/9Kw4v/SsOL/0rDi/9Kw4v/SsOL/0rDi/9Kw4v/SsOL/0rDi/9Kw4v/SsOL/0rD
        i/9Kw4v/SsOL/0rDi/9Kw4v/SsOL50nCij5JwooAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASsOLAErD
        i1dKw4v/SsOL/0rDi/9Kw4v/SsOL/0rDi/9Kw4v/SsOL/0rDi/9Kw4v/SsOL/0rDi/9Kw4v/SsOL/0rD
        i/9Kw4v/SsOL/0rDi/9Kw4v/SsOL/0rDi/9Kw4v/SsOLV0rDiwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABKw4sASsOLWUrDi/9Kw4v/SsOL/0rDi/9Kw4v/SsOL/0rDi/9Kw4v/SsOL/0rDi/9Kw4v/SsOL/0rD
        i/9Kw4v/SsOL/0rDi/9Kw4v/SsOL/0rDi/9Kw4v/SsOL/0rDi/9Kw4tZSsOLAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAErDiwBKw4tZSsOL/0rDi/9Kw4v/SsOL/0rDi/9Kw4v/SsOL/0rDi/9Kw4v/SsOL/0rD
        i/9Kw4v/SsOL/0rDi/9Kw4v/SsOL/0rDi/9Kw4v/SsOL/0rDi/9Kw4v/SsOL/0rDi1lKw4sAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAASsOLAErDi1lKw4v/SsOL/0rDi/9Jw4r/ScOK/0nDiv9Kw4v/SsOL/0rD
        i/9Kw4v/ScOK/0nDiv9Kw4v/SsOL/0rDi/9Kw4v/ScOK/0nDiv9Jw4r/SsOL/0rDi/9Kw4v/SsOLWUrD
        iwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABKw4sASsOLWUrDi/9Kw4v/VMaS/4/at/+o48b/eNOp/0zE
        jf9Kw4v/ScOL/2TMnP+f4MH/n+DB/2TMnP9Jw4v/SsOL/0zEjf9406n/qOPG/4/at/9UxpL/SsOL/0rD
        i/9Kw4tZSsOLAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAErDiwBKw4tZSsOL/0nDiv+P2rf/4/bt/+z5
        8//S8OL/a86g/0fCif9SxpD/tufR/+r48f/q+PH/tufQ/1LGkP9Hwon/a86h/9Lw4v/s+fP/4/bt/47a
        t/9Jw4r/SsOL/0rDi1lKw4sAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASsOLAErDi1lKw4v/ScOK/6fi
        x//s+fP/6vjx/+X37v9706r/RsKI/1fHk//Q8OH/6/ny/+v58v/R8OH/V8eT/0bCiP9606r/5ffu/+r4
        8f/s+fP/qOLH/0nDiv9Kw4v/SsOLWUrDiwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABKw4sASsOLWUrD
        i/9Jw4r/edOp/9Lx4v/l9+7/uunT/1/KmP9Iwor/TsSO/5vev//f9er/3/Xq/5vev/9OxI7/SMKK/1/K
        mP+66dP/5ffu/9Lx4v9506n/ScOK/0rDi/9Kw4tZSsOLAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAErD
        iwBKw4tZSsOL/0rDi/9MxIz/bM6g/3vUqv9fypn/SsOL/0rDi/9Jw4v/VMaR/3XRpv910ab/VMaR/0nD
        i/9Kw4v/SsOL/1/KmP971Kr/bM6g/0zEjf9Kw4v/SsOL/0rDi1lKw4sAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAASsOLAErDi1lKw4v/SsOL/0rDi/9Iwor/R8KJ/0nCiv9Kw4v/SsOL/0rDi/9Jw4v/R8KJ/0fC
        if9Jw4v/SsOL/0rDi/9Kw4v/ScKK/0fCif9Iwor/SsOL/0rDi/9Kw4v/SsOLWUrDiwAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAABKw4sASsOLWUrDi/9Kw4v/SsOL/0rDi/9Kw4v/SsOL/0rDi/9Kw4v/SsOL/0rD
        i/9Kw4v/SsOL/0rDi/9Kw4v/SsOL/0rDi/9Kw4v/SsOL/0rDi/9Kw4v/SsOL/0rDi/9Kw4tZSsOLAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAErDiwBKw4tZSsOL/0rDi/9Kw4v/SsOL/0rDi/9Kw4v/SsOL/0rD
        i/9Kw4v/SsOL/0rDi/9Kw4v/SsOL/0rDi/9Kw4v/SsOL/0rDi/9Kw4v/SsOL/0rDi/9Kw4v/SsOL/0rD
        i1lKw4sAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAScKLAEnCi1RKw4v9SsOL/0rDi/9Kw4v/SsOL/0rD
        i/9Kw4v/SsOL/0rDi/9Kw4v/SsOL/0rDi/9Kw4v/SsOL/0rDi/9Kw4v/SsOL/0rDi/9Kw4v/SsOL/0rD
        i/9Kw4v9SsKKVErCigAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABJw4sAScOLLErDi9JKw4v/SsOL/0rD
        i/9KxIv/SsSL/0rEi/9Kw4v/SsOL/0rDi/9Kw4v/SsOL/0rDi/9Kw4v/SsOL/0rEi/9KxIv/SsSL/0rD
        i/9Kw4v/SsOL/0rDi9JJw4srScOLAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEXBjABBwI0CScKKSkrD
        i8BKw4vlSsOL50m7hvdJt4T/SbiF/UrCiulKw4vnSsOL50rDi+dKw4vnSsOL50rDi+dKworpSbiF/Um3
        hP9Ju4b3SsOL50rDi+VKw4rCScOLTkG/jgFFwYwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAErD
        iwBKw4sBScKLD0rDixdL0JIWQ1RMr0NOSf9DT0rpRoZoLkrJjxdKw4sYSsOLGErDixhKw4sYSsmPF0aG
        aC5DT0rpQ05J/0NUTK9L0JIWSsOLF0rDihBKw4oBSsOKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAEJBQgBCQUKmQkFC/0JBQudCQUIYQkFCAAAAAAAAAAAAAAAAAAAA
        AABCQUIAQkFCGEJBQudCQUL/QkFCpkJBQgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQkJCAEJCQqRCQkL/QkJC50JCQhpCQkIAAAAAAAAA
        AAAAAAAAAAAAAEJCQgBCQkIaQkJC50JCQv9CQkKkQkJCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABCQkIAQUFBlUJCQv9CQkLtQkJCMkJC
        QgAAAAAAAAAAAAAAAAAAAAAAQkJCAEBAQDJCQkLtQkJC/0JCQpRCQkIAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEJCQgBCQkJoQkJC+EJC
        QvxBQUF+QUFBA0FBQQAAAAAAAAAAAENDQwBEREQDQUFBf0JCQvxCQkL4QUFBZ0JCQgAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQUFBAEJC
        QiZBQUHYQkJC/0JCQuJBQUFWQUFBCAAAAAAAAAAAPz8/CEFBQVdCQkLiQkJC/0JCQtdCQkIlQkJCAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABBQUEAPz8/A0JCQnBCQkLzQkJC/0FBQexCQkKeQkJCZkJCQmZCQkKeQUFB7EJCQv9CQkLzQkJCbkJC
        QgJCQkIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAABDQ0MAQ0NDD0JCQoRCQkLyQkJC/0JCQv9CQkL/QkJC/0JCQv9CQkL/QkJC8UJC
        QoNCQkIPQkJCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBQUEAQkJCCkFBQVxCQkK4QkJC5kJCQvpCQkL6QkJC5kJC
        QrhCQkJbQUFBCkJCQgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQkJCAEFBQRVCQkI9QUFBUkFB
        QVJCQkI9QUFBFUJCQgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA///////////4AAAf8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AA
        AA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/4AAAf/4fh//+H4f//h+H//4PB//+B
        gf//gAH//8AD///gB///+B////////////8=
</value>
  </data>
</root>